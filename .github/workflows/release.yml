name: Release

on:
  workflow_dispatch:
    inputs:
      releases:
        type: choice
        description: Choose the release type to do (Following SemVer)
        options: [ patch, minor, major]

jobs:
  release:
    permissions:
      contents: write
    name: Release pipeline
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Build
        run: | 
          npm ci
          npm run package
      - name: Release version
        id: newversion
        run: |
          NEWRELEASETAG=$(npm version ${{github.event.inputs.releases}} --git-tag-version false  -m "Release %s")
          sed -i "s/version:.*/version: $(cat ./package.json | jq '.version' | tr -d '"')/" openapi/openapi.yaml
          git add package.json package-lock.json openapi/openapi.yaml
          git commit -m "Release $NEWRELEASETAG"
          git tag $NEWRELEASETAG
          git push origin ${{github.ref}} $NEWRELEASETAG
          echo "release-tag=$NEWRELEASETAG" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.newversion.outputs.release-tag }}
          release_name: Release ${{ steps.newversion.outputs.release-tag }}
          draft: false
          prerelease: false
      - name: Upload OpenAPI YAML Release Asset
        id: upload-yaml-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/openapi.yaml
          asset_name: bonita-openapi-${{ steps.extract_version.outputs.version }}.yaml
          asset_content_type: text/x-yaml

      - name: Upload Postman Collection Release Asset
        id: upload-postman-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/postman.json
          asset_name: bonita-postman-collection-${{ steps.extract_version.outputs.version }}.json
          asset_content_type: application/json

      - name: Upload Rest APIs documentation site
        id: upload-rest-apis-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/bonita-openapi-${{ steps.extract_version.outputs.version }}.zip
          asset_name: bonita-openapi-${{ steps.extract_version.outputs.version }}.zip
          asset_content_type: application/zip
