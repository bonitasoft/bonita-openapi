post:
  tags:
    - Authentication
    - PortalAuthentication
  operationId: login
  security: []
  summary: Login
  description: |
    A call to the `/loginservice` will generates a set-cookie header in the response.

    The `JSESSIONID` cookie must be transfered with each subsequent calls. (If the REST API is used in an application running in a web browser, this is handled automatically by the web browser just like any cookies).

    Additional protection agains CSRF attacks is enabled by default for all fresh installations This security relies on `X-Bonita-API-Token` information.
    The `X-Bonita-API-Token` value can be found in the cookie named: `X-Bonita-API-Token`.

    All the subsequence REST API calls performing changes in the system using DELETE, POST, or PUT HTTP methods must contain the **HTTP header** below:

    ``` X-Bonita-API-Token: example-dummy-not-be-used-value ```
  requestBody:
    content:
      application/x-www-form-urlencoded:
        schema:
          $ref: '../components/schemas/LoginRequest.yaml'
  x-codeSamples:
    - lang: "Shell"
      label: "Curl"
      source:
        $ref: "../code_samples/curl/loginservice/post.bash"
  responses:
    '204':
      description: Login success
      headers:
        Set-Cookie:
          description: Session cookie
          schema:
            type: string
            example: JSESSIONID=C5385BFEE2969D9E46F0160C1952B0F1; Path=/bonita; HttpOnly; SameSite=Lax
        X-Bonita-API-Token:
          description: X-Bonita-API-Token - CSRF token (also present in the cookie response)
          schema:
            type: string
          example: ed27cbeb-9953-4d77-b5a2-1f62a6c2e0bb
      content:
        text/plain:
          schema:
            type: string
    '401':
      $ref: '../components/responses/Unauthorized.yaml'
    '403':
      $ref: '../components/responses/Forbidden.yaml'
    '400':
      $ref: '../components/responses/BadRequest.yaml'
    '5XX':
      $ref: '../components/responses/ServerError.yaml'
